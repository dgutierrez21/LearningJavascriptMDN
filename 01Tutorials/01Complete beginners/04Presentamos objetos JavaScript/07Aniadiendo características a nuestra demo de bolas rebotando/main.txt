Añadir funciones a nuestra demo de bolas que rebotan #ff0

En esta evaluación, se espera que utilice la demostración de bolas que rebotan del artículo anterior como punto de partida y le agregue algunas características nuevas e interesantes.

Consejos y sugerencias #008000
Un par de consejos antes de empezar.

Esta evaluación es bastante desafiante. Lea toda la evaluación antes de comenzar a codificar y dé cada paso lenta y cuidadosamente.
Puede ser una buena idea guardar una copia separada de la demostración después de que cada etapa funcione, para que pueda consultarla si se encuentra en problemas más adelante.

Resumen del proyecto #008000
Nuestra demostración de bola hinchable es divertida, pero ahora queremos hacerla un poco más interactiva agregando un círculo malvado controlado por el usuario, que se comerá las bolas si las atrapa. También queremos poner a prueba tus habilidades de construcción de objetos creando un objeto Shape() del que nuestras bolas y el círculo maligno puedan heredar. Finalmente, queremos agregar un contador de puntuación para rastrear la cantidad de bolas que quedan por capturar.

La siguiente captura de pantalla le da una idea de cómo debería verse el programa terminado:

ver carpeta img...

Pasos a completar #008000
En las secciones siguientes se describe lo que debe hacer.

Crear una clase Shape #00aae4
En primer lugar, cree una nueva clase Shape. Esto solo tiene un constructor. El constructor Shape debe definir las propiedades x, y, velX y velY de la misma manera que lo hacía originalmente el constructor Ball() pero no las propiedades color y size.

La clase Ball debe derivarse de Shape usando extends. El constructor de Ball debe:

---tome los mismos argumentos que antes: x, y, velX, velY, size y color

---llamar al constructor Shape usando super(), pasando los argumentos x, y, velX y velY

---Inicialice sus propias propiedades de color y size a partir de los parámetros que se le dan.

El constructor Ball debe definir una nueva propiedad llamada exists, que se utiliza para rastrear si las bolas existen en el programa (no han sido devoradas por el círculo maligno). Debe ser un booleano (truetrue/false), inicializado en true en el constructor.

El método collisionDetect() de la clase Ball necesita una pequeña actualización. Una bola debe considerarse para la detección de colisiones solo si la propiedad exists es true. Por lo tanto, reemplace el código collisionDetect() existente con el siguiente código:

ver funcion detectarColision en main.js...

Como se discutió anteriormente, la única adición es verificar si la bola existe, usando ball.exists en el condicional if.

Las definiciones de los métodos draw()() y update() deberían poder permanecer exactamente igual que antes.

En este punto, intente volver a cargar el código: debería funcionar igual que antes, con nuestros objetos rediseñados.